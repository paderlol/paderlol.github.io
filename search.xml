<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Kubernetes Nacos集群</title>
      <link href="/nacos-k8s.html"/>
      <url>/nacos-k8s.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近几天完成了 <a href="https://nacos.io" target="_blank" rel="noopener">Nacos</a> 在Kubernetes 部署,顺便写篇文章记录下部署过程，项目地址<a href="https://github.com/paderlol/nacos-k8s.git" target="_blank" rel="noopener">Nacos-K8s</a>,有兴趣的可以去了解下,后续会提交到<a href="https://github.com/nacos-group" target="_blank" rel="noopener">Nacos-Group</a> 里面。</p><a id="more"></a><h1 id="Kubernetes-Nacos"><a href="#Kubernetes-Nacos" class="headerlink" title="Kubernetes Nacos"></a>Kubernetes Nacos</h1><p>本项目包含一个可构建的Nacos Docker Image,旨在利用StatefulSets在<a href="https://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a>上部署<a href="https://nacos.io" target="_blank" rel="noopener">Nacos</a></p><h1 id="已知限制"><a href="#已知限制" class="headerlink" title="已知限制"></a>已知限制</h1><ul><li>暂时不支持动态增量扩容</li><li>必须使用持久卷,本项目实现NFS持久卷的例子,如果使用emptyDirs可能会导致数据丢失</li></ul><h1 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h1><p>在<a href="https://github.com/paderlol/nacos-k8s/tree/master/build" target="_blank" rel="noopener">build</a>目录中包含了已经打好包的Nacos(基于<strong>develop</strong>分支,已提PR,目前的release版本都不支持k8s集群)项目包,以及镜像制作文件,镜像基础环境Ubuntu 16.04、Open JDK 1.8(JDK 8u111).目前镜像已经提交到<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>。</p><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>build</td><td>构建Nacos镜像的项目包以及Dockerfile</td></tr><tr><td>deploy</td><td>k8s部署yaml文件</td></tr><tr><td>Initdb</td><td>Nacos 集群数据库初始化SQL脚本</td></tr></tbody></table><h1 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h1><h2 id="前提要求"><a href="#前提要求" class="headerlink" title="前提要求"></a>前提要求</h2><ul><li>本项目的使用,是基于你已经对Kubernetes有一定的认知,所以对如何搭建K8S集群,请自行google或者百度</li><li>NFS安装方面也不是本文的重点,请自行google或者百度</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>机器配置(作者演示使用阿里云ECS)</li></ul><table><thead><tr><th>机器内网IP</th><th>主机名</th><th>机器配置</th></tr></thead><tbody><tr><td>172.17.79.3</td><td>k8s-master</td><td>CentOS Linux release 7.4.1708 (Core) 单核 内存4G 普通云盘40G</td></tr><tr><td>172.17.79.4</td><td>node01</td><td>CentOS Linux release 7.4.1708 (Core) 单核 内存4G 普通云盘40G</td></tr><tr><td>172.17.79.5</td><td>node02</td><td>CentOS Linux release 7.4.1708 (Core) 单核 内存4G 普通云盘40G</td></tr></tbody></table><ul><li>Kubernetes 版本：<strong>1.12.2</strong> （如果你和我一样只使用了三台机器,那么记得开启master节点的部署功能）</li><li>NFS 版本：<strong>4.1</strong> 在k8s-master进行安装Server端,并且指定共享目录,本项目指定的<strong>/data/nfs-share</strong></li><li>Git</li></ul><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="Clone项目"><a href="#Clone项目" class="headerlink" title="Clone项目"></a>Clone项目</h3><p>在每台机器上都Clone本工程,演示工程就是导入根目录,所以部署路径都是root/nacos-k8s</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/paderlol/nacos-k8s.git</span><br></pre></td></tr></table></figure><h3 id="部署数据库"><a href="#部署数据库" class="headerlink" title="部署数据库"></a>部署数据库</h3><p>数据库是以指定节点的方式部署,主库部署在node01节点,从库部署在node02节点.</p><ul><li>部署主库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入clone下来的工程根目录</span><br><span class="line">cd nacos-k8s </span><br><span class="line"><span class="meta">#</span> 在k8s上创建mysql主库</span><br><span class="line">kubectl create -f deploy/mysql/mysql.yml</span><br></pre></td></tr></table></figure><ul><li>部署备库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入clone下来的工程根目录</span><br><span class="line">cd nacos-k8s </span><br><span class="line"><span class="meta">#</span> 在k8s上创建mysql备库</span><br><span class="line">kubectl create -f deploy/mysql/mysql-bak.yml</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果工程不是导入机器的根目录,那么同样需要修改mysql.yaml和mysql-bak.yaml中挂载路径,因为数据库PVC使用的是本地卷,请注意更改配置中的<strong>path</strong>路径如下所示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-pv-volume</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">manual</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">20</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  hostPath:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">"/root/nacos-k8s/mysql"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">....其他配置</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-init-pv-volume</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">initdb</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">20</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  hostPath:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">"/root/nacos-k8s/initdb"</span></span><br></pre></td></tr></table></figure><ul><li>部署后查看数据库是否已经正常运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>查看主库是否正常运行</span><br><span class="line">kubectl get pod -l app=mysql</span><br><span class="line">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">mysql-bak-5c5b5bd479-922zv   1/1     Running   0          2d23h</span><br><span class="line"><span class="meta">#</span>查看备库是否正常运行</span><br><span class="line">kubectl get pod -l app=mysql-bak</span><br></pre></td></tr></table></figure><h3 id="部署NFS"><a href="#部署NFS" class="headerlink" title="部署NFS"></a>部署NFS</h3><ul><li>创建角色 K8S在1.6以后默认开启了RBAC</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f deploy/nfs/rbac.yaml</span><br></pre></td></tr></table></figure><p>提示：如果你的K8S命名空间不是默认”default”,那么在创建RBAC之前先执行以下脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Set the subject of the RBAC objects to the current namespace where the provisioner is being deployed</span><br><span class="line"><span class="meta">$</span> NS=$(kubectl config get-contexts|grep -e "^\*" |awk '&#123;print $5&#125;')</span><br><span class="line"><span class="meta">$</span> NAMESPACE=$&#123;NS:-default&#125;</span><br><span class="line"><span class="meta">$</span> sed -i'' "s/namespace:.*/namespace: $NAMESPACE/g" ./deploy/nfs/rbac.yaml</span><br></pre></td></tr></table></figure><ul><li>创建ServiceAccount 以及部署NFS-Client Provisioner</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f deploy/nfs/deployment.yaml</span><br></pre></td></tr></table></figure><ul><li>创建NFS StorageClass</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f deploy/nfs/class.yaml</span><br></pre></td></tr></table></figure><ul><li>查看NFS是否运行正常</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -l app=nfs-client-provisioner</span><br></pre></td></tr></table></figure><h3 id="部署Nacos"><a href="#部署Nacos" class="headerlink" title="部署Nacos"></a>部署Nacos</h3><ul><li>获取主库从库在K8S的地址</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看主库和从库的cluster ip</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line">mysql            NodePort    10.105.42.247   &lt;none&gt;        3306:31833/TCP   2d23h</span><br><span class="line">mysql-bak        NodePort    10.105.35.138   &lt;none&gt;        3306:31522/TCP   2d23h</span><br></pre></td></tr></table></figure><ul><li>修改配置文件<strong>depoly/nacos/nacos-pvc-nfs.yaml</strong>,找到如下配置,填入上一步查到的主库和从库地址</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">db.host.zero:</span> <span class="string">"主库地址"</span></span><br><span class="line"><span class="string">db.name.zero:</span> <span class="string">"nacos_devtest"</span></span><br><span class="line"><span class="string">db.port.zero:</span> <span class="string">"3306"</span></span><br><span class="line"><span class="string">db.host.one:</span> <span class="string">"备库地址"</span></span><br><span class="line"><span class="string">db.name.one:</span> <span class="string">"nacos_devtest"</span></span><br><span class="line"><span class="string">db.port.one:</span> <span class="string">"3306"</span></span><br><span class="line"><span class="string">db.user:</span> <span class="string">"nacos"</span></span><br><span class="line"><span class="string">db.password:</span> <span class="string">"nacos"</span></span><br></pre></td></tr></table></figure><ul><li>创建并运行Nacos集群</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f nacos-k8s/deploy/nacos/nacos-pvc-nfs.yaml</span><br></pre></td></tr></table></figure><ul><li>查看是否运行正常</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -l app=nacos</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AME      READY   STATUS    RESTARTS   AGE</span><br><span class="line">nacos-0   1/1     Running   0          19h</span><br><span class="line">nacos-1   1/1     Running   0          19h</span><br><span class="line">nacos-2   1/1     Running   0          19h</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT 'http://集群地址:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;ip=20.18.7.10&amp;port=8080'</span><br></pre></td></tr></table></figure><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET 'http://集群地址:8848/nacos/v1/ns/instances?serviceName=nacos.naming.serviceName'</span><br></pre></td></tr></table></figure><h3 id="配置推送"><a href="#配置推送" class="headerlink" title="配置推送"></a>配置推送</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://集群地址:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&amp;content=helloWorld"</span><br></pre></td></tr></table></figure><h3 id="配置获取"><a href="#配置获取" class="headerlink" title="配置获取"></a>配置获取</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "http://集群地址:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test"</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q:如果不想搭建NFS,并且想体验nacos-k8s?</p><p> A:可以跳过部署nfs的步骤,最后创建运行nfs时,使用一下以下方式创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f nacos-k8s/deploy/nacos/nacos-quick-start.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nacos java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot 2.0 外部化配置介绍</title>
      <link href="/spring-boot01.html"/>
      <url>/spring-boot01.html</url>
      
        <content type="html"><![CDATA[<p><img src="/spring-boot01/spring-boot.png" alt="spring-boot"></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>在应用中管理配置并不是一个容易的任务，尤其是在应用需要部署到多个环境中时。通常会需要为每个环境提供一个对应的属性文件，用来配置各自的数据库连接信息、服务器信息和第三方服务账号等。通常的应用部署会包含开发、测试和生产等若干个环境。不同的环境之间的配置存在覆盖关系。测试环境中的配置会覆盖开发环境，而生产环境中的配置会覆盖测试环境。Spring 框架本身提供了多种的方式来管理配置属性文件。Spring 3.1 之前可以使用 PropertyPlaceholderConfigurer。Spring 3.1 引入了新的环境（Environment）和概要信息（Profile）API，是一种更加灵活的处理不同环境和配置文件的方式。不过 Spring 这些配置管理方式的问题在于选择太多，让开发人员无所适从。Spring Boot 提供了一种统一的方式来管理应用的配置，允许开发人员使用属性文件、YAML 文件、环境变量和命令行参数来定义优先级不同的配置值。</p></blockquote><a id="more"></a><p>Spring Boot 可以使用外部化配置来方便在不同环境的运行同样的程序</p><ul><li>properties 文件</li><li>YAML 文件</li><li>环境变量</li><li>命令行参数</li></ul><h4 id="内置顺序"><a href="#内置顺序" class="headerlink" title="内置顺序"></a>内置顺序</h4><p>Spring Boot 实现了很多<code>PropertySource</code>,按以下顺序,进行合理的相同属性的覆盖:</p><ol><li><p>home目录下的devtools全局设置属性（~/.spring-boot-devtools.properties，如果devtools激活）</p></li><li><p>测试用例上的@TestPropertySource注解.</p></li><li><p>测试用例上的@SpringBootTest#properties注解。</p></li><li><p>命令行参数</p></li><li><p>来自SPRING_APPLICATION_JSON的属性（环境变量或系统属性中内嵌的内联JSON）</p></li><li><p>ServletConfig初始化参数.</p></li><li><p>ServletContext初始化参数.</p></li><li><p>来自于java:comp/env的JNDI属性.</p></li><li><p>Java系统属性 (<code>System.getProperties()</code>).</p></li><li><p>操作系统环境变量.</p></li><li><p>RandomValuePropertySource，只包含random.*中的属性.</p></li><li><p>jar包或者war包之外Profile-specific应用属性（<code>application-{profile}.properties</code>和YAML变量）.</p></li><li><p>Jar包内的的Profile-specific应用属性 (<code>application-{profile}.properties</code> and YAML 变量).</p></li><li><p>Application properties outside of your packaged jar (<code>application.properties</code> and YAML 变量).</p></li><li><p>Application properties packaged inside your jar (<code>application.properties</code> and YAML 变量).</p></li><li><p>配置在<code>@Configuration</code> 类上<a href="https://docs.spring.io/spring/docs/5.0.8.RELEASE/javadoc-api/org/springframework/context/annotation/PropertySource.html" target="_blank" rel="noopener"><code>@PropertySource</code></a> 注解.</p></li><li><p>SpringApplication.setDefaultProperties 指定的默认属性</p></li></ol><p><strong>Note</strong>:</p><ul><li>以上是Spring-Boot内部的默认顺序,并不是<strong>绝对顺序</strong>,实际扩展的时候需要注意顺序问题,后续我会在实践篇去说明这个。</li></ul><h4 id="Spring-Boot-1-5-vs-2-0-变化"><a href="#Spring-Boot-1-5-vs-2-0-变化" class="headerlink" title="Spring Boot 1.5 vs 2.0 变化"></a>Spring Boot 1.5 vs 2.0 变化</h4><ol><li><p>Relaxed Binding(宽松绑定规则)</p><ul><li>属性源绑定规则</li></ul></li></ol><table><thead><tr><th>Property</th><th>Note</th></tr></thead><tbody><tr><td><code>acme.my-project.person.first-name</code></td><td>建议在 <code>.properties</code> and <code>.yml</code> 文件中使用.</td></tr><tr><td><code>acme.myProject.person.firstName</code></td><td>标准的驼峰命名</td></tr><tr><td><code>acme.my_project.person.first_name</code></td><td>下划线命名, <code>.properties</code> and <code>.yml</code> 文件中使用.</td></tr><tr><td><code>ACME_MYPROJECT_PERSON_FIRSTNAME</code></td><td>大写下划线命名, 在环境变量中使用.</td></tr></tbody></table><p>   <strong>注意</strong>：</p><blockquote><ul><li><p>在尽可能的情况下,请使用小写的短横线命名的方法会,比如： <code>my.property-name=acme</code></p></li><li><p>在注解<strong>@ConfigurationProperties</strong>中定义或者在<strong>@ConditionalOnProperty</strong>的时候属性名<strong>前缀</strong>的时候必须使用<strong>短横分隔命名,并且必须小写</strong>,只有注解中命名的时候必须遵守这个命名规则。我发现有些文章描述这个变化是不准确的,并不是所有情况下都是需要这样，比如我可以在配置文件中使用上述表格中的命名方式。</p></li></ul></blockquote><ul><li><p><code>RelaxedPropertyResolver</code> 类解析工具被删除掉,由<code>Environment</code>类代替</p></li><li><p><code>RelaxedDataBinder</code> 类绑定工具类被删除掉,在2.0.0之后使用<code>Binder</code>类,如下使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyProperties target = Binder.get(environment)</span><br><span class="line">.bind(<span class="string">"app.acme"</span>, MyProperties.class)</span><br><span class="line">.orElse(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">FlagType flagType = Binder.get(environment)</span><br><span class="line">.bind(<span class="string">"acme.app.my-flag"</span>, FlagType.class)</span><br><span class="line">.orElse(FlagType.DEFAULT);</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>在2.0之前的版本可以使用get/set方式注入静态变量,2.0以后不再支持</p></li><li><p><strong>@ConfigurationProperties Validation</strong></p><p>如果在2.0之后的版本需要在<code>@ConfigurationProperties</code>配置的类中使用验证必须使用<code>@Validated</code>注解</p></li><li><p><strong>Configuration Location</strong></p><p><code>spring.config.location</code> 属性在2.0之前的版本中会默认增加一个新的文件目录或者文件,在2.0的版本中,如果还要使用之前的功能,请使用<strong>spring.config.additional-location</strong></p></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#boot-features-external-config-validation" target="_blank" rel="noopener">Spring Boot Reference Guide-2.0.3</a></li><li><a href="https://docs.spring.io/spring-boot/docs/1.5.8.RELEASE/reference/htmlsingle/#boot-features-external-config-validation" target="_blank" rel="noopener">Spring Boot Reference Guide-1.5.8</a></li><li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Configuration-Changelog" target="_blank" rel="noopener">Spring Boot 2.0 Configuration Changelog</a></li><li><a href="https://github.com/spring-projects/spring-boot/wiki/Relaxed-Binding-2.0" target="_blank" rel="noopener">Relaxed Binding 2.0</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring Boot 2.0 配置属性自定义转换</title>
      <link href="/spring-boot02.html"/>
      <url>/spring-boot02.html</url>
      
        <content type="html"><![CDATA[<p><img src="/spring-boot02/spring-boot.png" alt="spring-boot"></p><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>当我们通过<code>@ConfigurationProperties</code>注解实现配置 bean的时候,如果默认的配置属性转换无法满足我们的需求的时候,我们可以根据自己的需求通过以下扩展方式对配置属性进行转换</p><hr><a id="more"></a><h3 id="PropertyEditorSupport实现"><a href="#PropertyEditorSupport实现" class="headerlink" title="PropertyEditorSupport实现"></a>PropertyEditorSupport实现</h3><blockquote><p>下面的例子是把属性中定义的字符串转换成<strong>Movie</strong>,并且把<strong>name</strong>的值大写</p></blockquote><ul><li>继承<strong>PropertyEditorSupport</strong>并且实现<strong>PropertyEditorRegistrar</strong>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.paderlol.spring.practice.properties.editor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.paderlol.spring.practice.properties.pojo.Movie;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyEditorSupport;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyEditorRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyEditorRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> pader PropertyEditor 在不同的包下面</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomMovieEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">PropertyEditorRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAsText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Movie movie = (Movie) getValue();</span><br><span class="line">        <span class="keyword">return</span> movie == <span class="keyword">null</span> ? <span class="string">""</span> : movie.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"继承[PropertyEditorSupport]类,转换数据=&#123;&#125;"</span>, text);</span><br><span class="line">        String[] data = text.split(<span class="string">"-"</span>);</span><br><span class="line">        Movie movie = Movie.builder().name(data[<span class="number">0</span>]</span><br><span class="line">        .toUpperCase()).seat(Integer.parseInt(data[<span class="number">1</span>]))</span><br><span class="line">        .build();</span><br><span class="line">        setValue(movie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.registerCustomEditor(Movie.class,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注册自定义的<strong>PropertyEditor</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomEditorConfigurer <span class="title">customEditorConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CustomEditorConfigurer customEditorConfigurer = <span class="keyword">new</span> CustomEditorConfigurer();      </span><br><span class="line">  <span class="comment">// 有两种注册方式 这是第一种</span></span><br><span class="line">    customEditorConfigurer.setPropertyEditorRegistrars(  </span><br><span class="line">        <span class="keyword">new</span> PropertyEditorRegistrar[]&#123; <span class="keyword">new</span> CustomMovieEditor() &#125;);</span><br><span class="line">          <span class="comment">//  第二 种</span></span><br><span class="line">        Map&lt;Class&lt;?&gt;,Class&lt;? extends PropertyEditor&gt;&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        maps.put(Movie.class,CustomMovieEditor.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> customEditorConfigurer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Converter接口-ConfigurationPropertiesBinding注解"><a href="#Converter接口-ConfigurationPropertiesBinding注解" class="headerlink" title="Converter接口+@ConfigurationPropertiesBinding注解"></a><strong>Converter</strong>接口+<strong>@ConfigurationPropertiesBinding</strong>注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationPropertiesBinding</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToPersonConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">convert</span><span class="params">(String from)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"使用[Converter]接口,转换数据=&#123;&#125;"</span>, from);</span><br><span class="line">        String[] data = from.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">return</span> Person.builder().name(data[<span class="number">0</span>]).age(Integer.parseInt(data[<span class="number">1</span>])).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>以上两种实现方式结果,但是<strong>Converter</strong>接口相比<strong>PropertyEditor</strong>接口更加灵活一些,<strong>PropertyEditor</strong>接口仅限于String转换,<strong>Converter</strong>可以自定义别的,并且<strong>PropertyEditor</strong>接口通常用于<strong>Controller</strong>中的接收参数的转换。</p></li><li><p><strong>@ConfigurationPropertiesBinding</strong>是限定符注解<strong>@Qualifier</strong>的派生类而已,参考<strong>org.springframework.boot.context.properties.ConversionServiceDeducer</strong>，以下是源代码片段</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConfigurationPropertiesBinding</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConverters</span><span class="params">(List&lt;Converter&lt;?, ?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.converters = converters;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* A list of custom converters (in addition to the defaults) to use when</span></span><br><span class="line"><span class="comment">* converting properties for binding.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> converters the converters to set</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConfigurationPropertiesBinding</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGenericConverters</span><span class="params">(List&lt;GenericConverter&gt; converters)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.genericConverters = converters;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Formatter</strong>接口是不能对属性完成转换的,因为<strong>ConversionServiceDeducer</strong>初始化的时候只获取<strong>GenericConverter</strong>和<strong>Converter</strong>接口</p></li><li><p>官方文档上还介绍了可以使用实现<strong>org.springframework.core.convert.ConversionService</strong>并且Bean名称也必须叫<strong>conversionService</strong>，不过大部分情况不推荐自己通过这种方式去实现这个接口,因为自己实现的<strong>ConversionService</strong>会替代默认的。具体参考<strong>ConversionServiceDeducer</strong>源码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConversionService <span class="title">getConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//默认首先寻找Bean名称叫conversionService的ConversionService的Bean类</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.applicationContext.getBean(</span><br><span class="line">ConfigurableApplicationContext.CONVERSION_SERVICE_BEAN_NAME,</span><br><span class="line">ConversionService.class);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">            <span class="comment">//找不到就默认生成ApplicationConversionService类</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.applicationContext.getAutowireCapableBeanFactory()</span><br><span class="line">.createBean(Factory.class).create();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring Boot 2.0 @ConfigurationProperties 使用</title>
      <link href="/spring-boot03.html"/>
      <url>/spring-boot03.html</url>
      
        <content type="html"><![CDATA[<p><img src="/spring-boot03/spring-boot.png" alt="spring-boot"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Spring Boot的一个便捷功能是外部化配置，可以轻松访问属性文件中定义的属性。本文将详细介绍@ConfigurationProperties的使用。</p><a id="more"></a><h3 id="配置项目POM"><a href="#配置项目POM" class="headerlink" title="配置项目POM"></a>配置项目POM</h3><ul><li>在pom.xml中定义Spring-Boot 为parent</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>添加依赖</p><ol><li><p>添加<em>web</em>,因为我们需要使用到JSR-303规范的<em>Validator</em>,如果不想使用web依赖,也可以直接依赖<em>hibernate-validator</em></p></li><li><p>添加<em>spring-boot-configuration-processor</em>,可以在编译时生成属性元数据(spring-configuration-metadata.json).</p></li><li><p>添加<em>lombok</em>,可以方便使用注释处理器的功能省去Pojo定义中get set这些麻烦工作.</p></li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;version&gt;6.0.11.Final&lt;/version&gt;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;scope&gt;compile&lt;/scope&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="例子编写"><a href="#例子编写" class="headerlink" title="例子编写"></a>例子编写</h3><p>首先定义一个<em>DocumentServerProperties</em>对象,下面这个文档服务器配置是我假设的,主要是为了演示属性配置的大部分情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentServerProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remoteAddress;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> preferIpAddress;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxConnections=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> AuthInfo authInfo;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; whitelist;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; converter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Person&gt; defaultShareUsers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绑定属性配置"><a href="#绑定属性配置" class="headerlink" title="绑定属性配置"></a>绑定属性配置</h4><p>注意<em>@ConfigurationProperties</em>并没有把当前类注册成为一个Spring的Bean,下面介绍<em>@ConfigurationProperties</em>配置注入的三种方式.</p><ul><li>配合<em>@Component</em>注解直接进行注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"doc"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentServerProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">//代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<em>@EnableConfigurationProperties</em>,通常配置在标有<em>@Configuration</em>的类上,当然其他<em>@Component</em>注解的派生类也可以，不过不推荐.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"doc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentServerProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">//代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DocumentServerProperties documentServerProperties</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SomeConfiguration</span><span class="params">(DocumentServerProperties documentServerProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.documentServerProperties = documentServerProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<em>@Bean</em>方式在标有<em>@Configuration</em>的类进行注入,这种方式通常可以用在对第三方类进行配置属性注册</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DocumentServerProperties <span class="title">documentServerProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DocumentServerProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"demo.third"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThirdComponent <span class="title">thirdComponent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThirdComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><p> Spring-Boot中配置文件的格式有properties和yaml两种格式,针对上面的配置对象分别写了两种格式的配置文件例子.</p><ul><li>Properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">doc.remote-address=127.0.0.1</span><br><span class="line">doc.port=8080</span><br><span class="line">doc.max-connections=30</span><br><span class="line">doc.prefer-ip-address=true</span><br><span class="line">#doc.whitelist=192.168.0.1,192.168.0.2</span><br><span class="line"># 这种等同于下面的doc.whitelist[0] doc.whitelist[1]</span><br><span class="line">doc.whitelist[0]=192.168.0.1</span><br><span class="line">doc.whitelist[1]=192.168.0.2</span><br><span class="line">doc.default-share-users[0].name=jack</span><br><span class="line">doc.default-share-users[0].age=18</span><br><span class="line">doc.converter.a=xxConverter</span><br><span class="line">doc.converter.b=xxConverter</span><br><span class="line">doc.auth-info.username=user</span><br><span class="line">doc.auth-info.password=password</span><br></pre></td></tr></table></figure><ul><li>Yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">doc:</span></span><br><span class="line"><span class="attr">  remote-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">  max-connections:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">  prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  whitelist:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">  default-share-users:</span> </span><br><span class="line"><span class="attr">    - name:</span> <span class="string">jack</span></span><br><span class="line"><span class="attr">      age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">  converter:</span> </span><br><span class="line"><span class="attr">    a:</span> <span class="string">aConverter</span></span><br><span class="line"><span class="attr">    b:</span> <span class="string">bConverter</span></span><br><span class="line"><span class="attr">  auth-info:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><p>在上面的两个配置文件中,其实已经把我们平常大部分能使用到的属性配置场景都覆盖了,可能还有一些特殊的未介绍到,比如Duration、InetAddress等。</p><h4 id="增加属性验证"><a href="#增加属性验证" class="headerlink" title="增加属性验证"></a>增加属性验证</h4><p>下面我们利用JSR303规范的实现对DocumentServerProperties属性配置类,添加一些常规验证,比如Null检查、数字校验等操作,</p><p>需要注意在Spring-Boot 2.0版本以后,如果使用JSR303对属性配置进行验证必须添加<em>@Validated</em>注解,使用方式如下片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"doc"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentServerProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span> <span class="comment">// 判断不为空的情况</span></span><br><span class="line">    <span class="keyword">private</span> String remoteAddress;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//限制端口只能是80-65536之间</span></span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">80</span>)</span><br><span class="line">    <span class="meta">@Max</span>(<span class="number">65536</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="comment">//其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在有些数情况下,我们希望自定义验证器,有两种方式可以进行实现</p><ol><li>实现<em>org.springframework.validation.Validator</em>接口,并且在配置一个Bean名称必须叫<strong>configurationPropertiesValidator</strong>，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLoginValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINIMUM_PASSWORD_LENGTH = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> UserLogin.class.isAssignableFrom(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object target, Errors errors)</span> </span>&#123;</span><br><span class="line">       ValidationUtils.rejectIfEmptyOrWhitespace(errors, <span class="string">"userName"</span>, <span class="string">"field.required"</span>);</span><br><span class="line">       ValidationUtils.rejectIfEmptyOrWhitespace(errors, <span class="string">"password"</span>, <span class="string">"field.required"</span>);</span><br><span class="line">       UserLogin login = (UserLogin) target;</span><br><span class="line">       <span class="keyword">if</span> (login.getPassword() != <span class="keyword">null</span></span><br><span class="line">             &amp;&amp; login.getPassword().trim().length() &lt; MINIMUM_PASSWORD_LENGTH) &#123;</span><br><span class="line">          errors.rejectValue(<span class="string">"password"</span>, <span class="string">"field.min.length"</span>,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;Integer.valueOf(MINIMUM_PASSWORD_LENGTH)&#125;,</span><br><span class="line">                <span class="string">"The password must be at least ["</span> + MINIMUM_PASSWORD_LENGTH + <span class="string">"] characters in );</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>和上面一样也是实现org.springframework.validation.Validator接口,不过是需要验证的属性配置类本身去实现这个接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"doc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentServerProperties</span> <span class="keyword">implements</span> <span class="title">Validator</span></span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String remoteAddress;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> preferIpAddress;</span><br><span class="line">   <span class="comment">//其他属性 </span></span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object target, Errors errors)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断逻辑其实可以参照上面的代码片段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别注意</strong>:</p><ul><li><p>只有在需要使用JSR303规范实现的验证器时,才需要对对象配置@Validated,刚刚上面两种方式并不需要。</p></li><li><p>第一种实现和第二种实现都是实现org.springframework.validation.Validator接口,但是前者是针对全局的,后者只针对实现这个接口的配置对象</p></li></ul><p>关于上述两点，我为啥确定? 来自<em>ConfigurationPropertiesBinder</em>的源码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Validator&gt; <span class="title">getValidators</span><span class="params">(Bindable&lt;?&gt; target)</span> </span>&#123;</span><br><span class="line">List&lt;Validator&gt; validators = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.configurationPropertiesValidator != <span class="keyword">null</span>) &#123;</span><br><span class="line">validators.add(<span class="keyword">this</span>.configurationPropertiesValidator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.jsr303Present &amp;&amp; target.getAnnotation(Validated.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">validators.add(getJsr303Validator());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (target.getValue() != <span class="keyword">null</span> &amp;&amp; target.getValue().get() <span class="keyword">instanceof</span> Validator) &#123;</span><br><span class="line">validators.add((Validator) target.getValue().get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> validators;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面的例子,我们了解了@ConfigurationProperties的使用以及如何进行验证,包括属性验证器的几种实现方式.下个章节我会从源码的角度分析属性的加载,以及如何解析到Bean里面去的。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
