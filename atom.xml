<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pader&#39;s Blog</title>
  <subtitle>Pader&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://paderlol.cn/"/>
  <updated>2018-10-28T13:22:09.757Z</updated>
  <id>https://paderlol.cn/</id>
  
  <author>
    <name>Pader</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 2.0 外部化配置介绍</title>
    <link href="https://paderlol.cn/spring-boot01.html"/>
    <id>https://paderlol.cn/spring-boot01.html</id>
    <published>2018-10-20T07:38:22.000Z</published>
    <updated>2018-10-28T13:22:09.757Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/spring-boot01/spring-boot.png" alt="spring-boot"></p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>在应用中管理配置并不是一个容易的任务，尤其是在应用需要部署到多个环境中时。通常会需要为每个环境提供一个对应的属性文件，用来配置各自的数据库连接信息、服务器信息和第三方服务账号等。通常的应用部署会包含开发、测试和生产等若干个环境。不同的环境之间的配置存在覆盖关系。测试环境中的配置会覆盖开发环境，而生产环境中的配置会覆盖测试环境。Spring 框架本身提供了多种的方式来管理配置属性文件。Spring 3.1 之前可以使用 PropertyPlaceholderConfigurer。Spring 3.1 引入了新的环境（Environment）和概要信息（Profile）API，是一种更加灵活的处理不同环境和配置文件的方式。不过 Spring 这些配置管理方式的问题在于选择太多，让开发人员无所适从。Spring Boot 提供了一种统一的方式来管理应用的配置，允许开发人员使用属性文件、YAML 文件、环境变量和命令行参数来定义优先级不同的配置值。</p>
</blockquote>
<a id="more"></a>
<p>Spring Boot 可以使用外部化配置来方便在不同环境的运行同样的程序</p>
<ul>
<li>properties 文件</li>
<li>YAML 文件</li>
<li>环境变量</li>
<li>命令行参数</li>
</ul>
<h4 id="内置顺序"><a href="#内置顺序" class="headerlink" title="内置顺序"></a>内置顺序</h4><p>Spring Boot 实现了很多<code>PropertySource</code>,按以下顺序,进行合理的相同属性的覆盖:</p>
<ol>
<li><p>home目录下的devtools全局设置属性（~/.spring-boot-devtools.properties，如果devtools激活）</p>
</li>
<li><p>测试用例上的@TestPropertySource注解.</p>
</li>
<li><p>测试用例上的@SpringBootTest#properties注解。</p>
</li>
<li><p>命令行参数</p>
</li>
<li><p>来自SPRING_APPLICATION_JSON的属性（环境变量或系统属性中内嵌的内联JSON）</p>
</li>
<li><p>ServletConfig初始化参数.</p>
</li>
<li><p>ServletContext初始化参数.</p>
</li>
<li><p>来自于java:comp/env的JNDI属性.</p>
</li>
<li><p>Java系统属性 (<code>System.getProperties()</code>).</p>
</li>
<li><p>操作系统环境变量.</p>
</li>
<li><p>RandomValuePropertySource，只包含random.*中的属性.</p>
</li>
<li><p>jar包或者war包之外Profile-specific应用属性（<code>application-{profile}.properties</code>和YAML变量）.</p>
</li>
<li><p>Jar包内的的Profile-specific应用属性 (<code>application-{profile}.properties</code> and YAML 变量).</p>
</li>
<li><p>Application properties outside of your packaged jar (<code>application.properties</code> and YAML 变量).</p>
</li>
<li><p>Application properties packaged inside your jar (<code>application.properties</code> and YAML 变量).</p>
</li>
<li><p>配置在<code>@Configuration</code> 类上<a href="https://docs.spring.io/spring/docs/5.0.8.RELEASE/javadoc-api/org/springframework/context/annotation/PropertySource.html" target="_blank" rel="noopener"><code>@PropertySource</code></a> 注解.</p>
</li>
<li><p>SpringApplication.setDefaultProperties 指定的默认属性</p>
</li>
</ol>
<p><strong>Note</strong>:</p>
<ul>
<li>以上是Spring-Boot内部的默认顺序,并不是<strong>绝对顺序</strong>,实际扩展的时候需要注意顺序问题,后续我会在实践篇去说明这个。</li>
</ul>
<h4 id="Spring-Boot-1-5-vs-2-0-变化"><a href="#Spring-Boot-1-5-vs-2-0-变化" class="headerlink" title="Spring Boot 1.5 vs 2.0 变化"></a>Spring Boot 1.5 vs 2.0 变化</h4><ol>
<li><p>Relaxed Binding(宽松绑定规则)</p>
<ul>
<li>属性源绑定规则</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th>Property</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>acme.my-project.person.first-name</code></td>
<td>建议在 <code>.properties</code> and <code>.yml</code> 文件中使用.</td>
</tr>
<tr>
<td><code>acme.myProject.person.firstName</code></td>
<td>标准的驼峰命名</td>
</tr>
<tr>
<td><code>acme.my_project.person.first_name</code></td>
<td>下划线命名, <code>.properties</code> and <code>.yml</code> 文件中使用.</td>
</tr>
<tr>
<td><code>ACME_MYPROJECT_PERSON_FIRSTNAME</code></td>
<td>大写下划线命名, 在环境变量中使用.</td>
</tr>
</tbody>
</table>
<p>   <strong>注意</strong>：</p>
<blockquote>
<ul>
<li><p>在尽可能的情况下,请使用小写的短横线命名的方法会,比如： <code>my.property-name=acme</code></p>
</li>
<li><p>在注解<strong>@ConfigurationProperties</strong>中定义或者在<strong>@ConditionalOnProperty</strong>的时候属性名<strong>前缀</strong>的时候必须使用<strong>短横分隔命名,并且必须小写</strong>,只有注解中命名的时候必须遵守这个命名规则。我发现有些文章描述这个变化是不准确的,并不是所有情况下都是需要这样，比如我可以在配置文件中使用上述表格中的命名方式。</p>
</li>
</ul>
</blockquote>
<ul>
<li><p><code>RelaxedPropertyResolver</code> 类解析工具被删除掉,由<code>Environment</code>类代替</p>
</li>
<li><p><code>RelaxedDataBinder</code> 类绑定工具类被删除掉,在2.0.0之后使用<code>Binder</code>类,如下使用方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyProperties target = Binder.get(environment)</span><br><span class="line">		.bind(<span class="string">"app.acme"</span>, MyProperties.class)</span><br><span class="line">		.orElse(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">FlagType flagType = Binder.get(environment)</span><br><span class="line">		.bind(<span class="string">"acme.app.my-flag"</span>, FlagType.class)</span><br><span class="line">		.orElse(FlagType.DEFAULT);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li><p>在2.0之前的版本可以使用get/set方式注入静态变量,2.0以后不再支持</p>
</li>
<li><p><strong>@ConfigurationProperties Validation</strong></p>
<p>如果在2.0之后的版本需要在<code>@ConfigurationProperties</code>配置的类中使用验证必须使用<code>@Validated</code>注解</p>
</li>
<li><p><strong>Configuration Location</strong></p>
<p><code>spring.config.location</code> 属性在2.0之前的版本中会默认增加一个新的文件目录或者文件,在2.0的版本中,如果还要使用之前的功能,请使用<strong>spring.config.additional-location</strong></p>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#boot-features-external-config-validation" target="_blank" rel="noopener">Spring Boot Reference Guide-2.0.3</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/1.5.8.RELEASE/reference/htmlsingle/#boot-features-external-config-validation" target="_blank" rel="noopener">Spring Boot Reference Guide-1.5.8</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Configuration-Changelog" target="_blank" rel="noopener">Spring Boot 2.0 Configuration Changelog</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/wiki/Relaxed-Binding-2.0" target="_blank" rel="noopener">Relaxed Binding 2.0</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/spring-boot01/spring-boot.png&quot; alt=&quot;spring-boot&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在应用中管理配置并不是一个容易的任务，尤其是在应用需要部署到多个环境中时。通常会需要为每个环境提供一个对应的属性文件，用来配置各自的数据库连接信息、服务器信息和第三方服务账号等。通常的应用部署会包含开发、测试和生产等若干个环境。不同的环境之间的配置存在覆盖关系。测试环境中的配置会覆盖开发环境，而生产环境中的配置会覆盖测试环境。Spring 框架本身提供了多种的方式来管理配置属性文件。Spring 3.1 之前可以使用 PropertyPlaceholderConfigurer。Spring 3.1 引入了新的环境（Environment）和概要信息（Profile）API，是一种更加灵活的处理不同环境和配置文件的方式。不过 Spring 这些配置管理方式的问题在于选择太多，让开发人员无所适从。Spring Boot 提供了一种统一的方式来管理应用的配置，允许开发人员使用属性文件、YAML 文件、环境变量和命令行参数来定义优先级不同的配置值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://paderlol.cn/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0 配置属性自定义转换</title>
    <link href="https://paderlol.cn/spring-boot02.html"/>
    <id>https://paderlol.cn/spring-boot02.html</id>
    <published>2018-10-20T07:38:22.000Z</published>
    <updated>2018-10-28T13:30:05.698Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/spring-boot02/spring-boot.png" alt="spring-boot"></p>
<h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>当我们通过<code>@ConfigurationProperties</code>注解实现配置 bean的时候,如果默认的配置属性转换无法满足我们的需求的时候,我们可以根据自己的需求通过以下扩展方式对配置属性进行转换</p>
<hr>
<a id="more"></a>
<h3 id="PropertyEditorSupport实现"><a href="#PropertyEditorSupport实现" class="headerlink" title="PropertyEditorSupport实现"></a>PropertyEditorSupport实现</h3><blockquote>
<p>下面的例子是把属性中定义的字符串转换成<strong>Movie</strong>,并且把<strong>name</strong>的值大写</p>
</blockquote>
<ul>
<li><p>继承<strong>PropertyEditorSupport</strong>并且实现<strong>PropertyEditorRegistrar</strong>接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.paderlol.spring.practice.properties.editor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.paderlol.spring.practice.properties.pojo.Movie;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyEditorSupport;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyEditorRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyEditorRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pader PropertyEditor 在不同的包下面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomMovieEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> <span class="keyword">implements</span> <span class="title">PropertyEditorRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAsText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Movie movie = (Movie) getValue();</span><br><span class="line">        <span class="keyword">return</span> movie == <span class="keyword">null</span> ? <span class="string">""</span> : movie.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"继承[PropertyEditorSupport]类,转换数据=&#123;&#125;"</span>, text);</span><br><span class="line">        String[] data = text.split(<span class="string">"-"</span>);</span><br><span class="line">        Movie movie = Movie.builder().name(data[<span class="number">0</span>].toUpperCase()).seat(Integer.parseInt(data[<span class="number">1</span>]))</span><br><span class="line">                .build();</span><br><span class="line">        setValue(movie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.registerCustomEditor(Movie.class,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册自定义的<strong>PropertyEditor</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomEditorConfigurer <span class="title">customEditorConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CustomEditorConfigurer customEditorConfigurer = <span class="keyword">new</span> 				CustomEditorConfigurer();</span><br><span class="line">		<span class="comment">// 有两种注册方式 这是第一种</span></span><br><span class="line">        customEditorConfigurer.setPropertyEditorRegistrars(</span><br><span class="line">                <span class="keyword">new</span> PropertyEditorRegistrar[]&#123; <span class="keyword">new</span> CustomMovieEditor() &#125;);</span><br><span class="line">        <span class="comment">// 第二种</span></span><br><span class="line">        Map&lt;Class&lt;?&gt;,Class&lt;? extends PropertyEditor&gt;&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        maps.put(Movie.class,CustomMovieEditor.class);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> customEditorConfigurer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Converter接口-ConfigurationPropertiesBinding注解"><a href="#Converter接口-ConfigurationPropertiesBinding注解" class="headerlink" title="Converter接口+@ConfigurationPropertiesBinding注解"></a><strong>Converter</strong>接口+<strong>@ConfigurationPropertiesBinding</strong>注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意</span></span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="meta">@ConfigurationPropertiesBinding</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToPersonConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">convert</span><span class="params">(String from)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"使用[Converter]接口,转换数据=&#123;&#125;"</span>, from);</span><br><span class="line">        String[] data = from.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">return</span> Person.builder().name(data[<span class="number">0</span>]).age(Integer.parseInt(data[<span class="number">1</span>])).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>以上两种实现方式结果,但是<strong>Converter</strong>接口相比<strong>PropertyEditor</strong>接口更加灵活一些,<strong>PropertyEditor</strong>接口仅限于String转换,<strong>Converter</strong>可以自定义别的,并且<strong>PropertyEditor</strong>接口通常用于<strong>Controller</strong>中的接收参数的转换。</p>
</li>
<li><p><strong>@ConfigurationPropertiesBinding</strong>是限定符注解<strong>@Qualifier</strong>的派生类而已,参考<strong>org.springframework.boot.context.properties.ConversionServiceDeducer</strong>，以下是源代码片段</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConfigurationPropertiesBinding</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConverters</span><span class="params">(List&lt;Converter&lt;?, ?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.converters = converters;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A list of custom converters (in addition to the defaults) to use when</span></span><br><span class="line"><span class="comment"> * converting properties for binding.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> converters the converters to set</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConfigurationPropertiesBinding</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGenericConverters</span><span class="params">(List&lt;GenericConverter&gt; converters)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.genericConverters = converters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Formatter</strong>接口是不能对属性完成转换的,因为<strong>ConversionServiceDeducer</strong>初始化的时候只获取<strong>GenericConverter</strong>和<strong>Converter</strong>接口</p>
</li>
<li><p>官方文档上还介绍了可以使用实现<strong>org.springframework.core.convert.ConversionService</strong>并且Bean名称也必须叫<strong>conversionService</strong>，不过大部分情况不推荐自己通过这种方式去实现这个接口,因为自己实现的<strong>ConversionService</strong>会替代默认的。具体参考<strong>ConversionServiceDeducer</strong>源码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConversionService <span class="title">getConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//默认首先寻找Bean名称叫conversionService的ConversionService的Bean类</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.applicationContext.getBean(</span><br><span class="line">					ConfigurableApplicationContext.CONVERSION_SERVICE_BEAN_NAME,</span><br><span class="line">					ConversionService.class);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">            <span class="comment">//找不到就默认生成ApplicationConversionService类</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.applicationContext.getAutowireCapableBeanFactory()</span><br><span class="line">					.createBean(Factory.class).create();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/spring-boot02/spring-boot.png&quot; alt=&quot;spring-boot&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;上下文&quot;&gt;&lt;a href=&quot;#上下文&quot; class=&quot;headerlink&quot; title=&quot;上下文&quot;&gt;&lt;/a&gt;上下文&lt;/h3&gt;&lt;p&gt;当我们通过&lt;code&gt;@ConfigurationProperties&lt;/code&gt;注解实现配置 bean的时候,如果默认的配置属性转换无法满足我们的需求的时候,我们可以根据自己的需求通过以下扩展方式对配置属性进行转换&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://paderlol.cn/categories/SpringBoot/"/>
    
    
  </entry>
  
</feed>
